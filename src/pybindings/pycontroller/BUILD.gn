# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("//build_overrides/pigweed.gni")

import("$dir_pw_build/python.gni")

import("${chip_root}/build/chip/tools.gni")
import("${chip_root}/src/platform/device.gni")
import("${dir_pw_unit_test}/test.gni")

if (current_os == "mac") {
  import("${build_root}/config/mac/mac_sdk.gni")
}

config("controller_wno_deprecate") {
  cflags = [
    "-Wno-deprecated-declarations",
    "-Wno-shadow",
    "-Wno-unused-result",
    "-Wsign-compare",
    "-Wunreachable-code",
  ]
}

shared_library("CHIPController") {
  output_name = "PyChip"
  output_dir = "${target_out_dir}/pybindings"
  include_dirs = [
    "/usr/local/include/pybind11/",
    "/Library/Frameworks/Python.framework/Versions/3.9/include/python3.9",
  ]

  sources = [
    "${root_gen_dir}/include/controller/python/CHIPErrorToExceptionBindings.cpp",
    "${root_gen_dir}/include/controller/python/CHIPErrorToExceptionBindings.h",
    "PyChip_ControllerDeviceCommissioner.cpp",
    "PyChip_ControllerInitParams.cpp",
    "PyChip_DeviceAddressUpdateDelegate.cpp",
    "PyChip_Main.cpp",
    "PyChip_Memory.cpp",
    "PyChip_PlatFormManager.cpp",
    "PyChip_Rendezvous.cpp",
    "PyChip_SetupPayload.cpp",
    "PyChip_TransportType.cpp",
  ]

  if (chip_enable_ble) {
    if (current_os == "linux") {
      sources += [ "chip/ble/LinuxImpl.cpp" ]
    } else if (current_os == "mac") {
      cflags = [
        "-fobjc-arc",
        "-fno-common",
        "-dynamic",
        "-DNDEBUG",
        "-g",
        "-fwrapv",
        "-O3",
        "-arch",
        "arm64",
        "-arch",
        "x86_64",
        "-g",
      ]
    } else {
      assert(false, "No BLE implementation available for the current OS.")
    }
  }

  public_deps = [
    ":build_exceptions",
    "${chip_root}/src/app",
    "${chip_root}/src/controller/data_model",
    "${chip_root}/src/lib",
    "${chip_root}/src/lib/core",
    "${chip_root}/src/lib/mdns",
    "${chip_root}/src/lib/support",
    "${chip_root}/src/platform",
    "${chip_root}/src/setup_payload",
    "${chip_root}/src/transport",
  ]
  configs += [ ":controller_wno_deprecate" ]
  ldflags = [
    "-F/Library/Frameworks/",
    "-framework",
    "Python",
    "-framework",
    "CoreFoundation",
    "-L/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/config-3.9-darwin",
    "-frtti",
  ]
}
pw_python_action("build_exceptions") {
  script = "create_error_wrapper.py"

  header_file =
      "${root_gen_dir}/include/controller/python/CHIPErrorToExceptionBindings.h"
  cpp_file = "${root_gen_dir}/include/controller/python/CHIPErrorToExceptionBindings.cpp"
  outputs = [
    header_file,
    cpp_file,
  ]

  args = [
    "--output_cpp_file=" + rebase_path(cpp_file, root_build_dir),
    "--output_header_file=" + rebase_path(header_file, root_build_dir),
    "--error_header=" +
        rebase_path("${chip_root}/src/lib/core/CHIPError.h", root_build_dir),
    "--config_header=" +
        rebase_path("${chip_root}/src/lib/core/CHIPConfig.h", root_build_dir),
  ]
}

pw_python_action("pycontroller") {
  script = "build-chip-wheel.py"

  _py_manifest_files = [
    {
      src_dir = "."
      sources = [
        "chip-device-ctrl.py",
        "chip-repl.py",
      ]
    },
    {
      src_dir = target_out_dir
      sources = [ "${target_out_dir}/pybindings/PyChip.so" ]
    },
    {
      src_dir = "//"
      sources = [ "//LICENSE" ]
    },
  ]

  _py_manifest_file = "${target_gen_dir}/${target_name}.py_manifest.json"

  inputs = []
  _py_manifest_files_rebased = []
  foreach(_manifest_entry, _py_manifest_files) {
    inputs += _manifest_entry.sources
    _py_manifest_files_rebased += [
      {
        src_dir = rebase_path(_manifest_entry.src_dir,
                              get_path_info(_py_manifest_file, "dir"))
        sources = rebase_path(_manifest_entry.sources, _manifest_entry.src_dir)
      },
    ]
  }

  _py_manifest = {
    files = _py_manifest_files_rebased
  }

  write_file(_py_manifest_file, _py_manifest, "json")

  _dist_dir = "${root_out_dir}/controller/python"

  if (current_cpu == "x64") {
    cpu_tag = "x86_64"
  } else if (current_cpu == "arm64") {
    cpu_tag = "aarch64"
  } else {
    cpu_tag = current_cpu
  }

  if (current_os == "mac") {
    platform_tag = "macosx_" + string_replace(mac_deployment_target, ".", "_")
  } else {
    platform_tag = current_os
  }

  platform_tag = platform_tag + "_" + cpu_tag

  tags = "cp37-abi3-" + platform_tag

  args = [
    "--package_name",
    "pybindings",
    "--build_number",
    "0.0",
    "--build_dir",
    rebase_path("${target_gen_dir}/${target_name}.py_build", root_build_dir),
    "--dist_dir",
    rebase_path(_dist_dir, root_build_dir),
    "--manifest",
    rebase_path(_py_manifest_file, root_build_dir),
    "--plat-name",
    platform_tag,
  ]

  public_deps = [ ":CHIPController" ]

  output_name = "pybindings-0.0.dist-info-0.0-${tags}.whl"
  outputs = [ "${_dist_dir}/$output_name" ]
}
