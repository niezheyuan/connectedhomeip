#include <platform/SoftwareUpdateManager.h>
#include <sstream> // __str__

#include <functional>
#include <pybind11/pybind11.h>
#include <string>

#ifndef BINDER_PYBIND11_TYPE_CASTER
#define BINDER_PYBIND11_TYPE_CASTER
PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>)
PYBIND11_DECLARE_HOLDER_TYPE(T, T *)
PYBIND11_MAKE_OPAQUE(std::shared_ptr<void>)
#endif

void bind_PyChip_57(std::function<pybind11::module &(std::string const & namespace_)> & M)
{
    { // chip::DeviceLayer::SoftwareUpdateManager file:platform/SoftwareUpdateManager.h line:38
        pybind11::class_<chip::DeviceLayer::SoftwareUpdateManager, chip::DeviceLayer::SoftwareUpdateManager *> cl(
            M("chip::DeviceLayer"), "SoftwareUpdateManager", "");

        pybind11::enum_<chip::DeviceLayer::SoftwareUpdateManager::State>(cl, "State", pybind11::arithmetic(), "")
            .value("kState_Idle", chip::DeviceLayer::SoftwareUpdateManager::kState_Idle)
            .value("kState_ScheduledHoldoff", chip::DeviceLayer::SoftwareUpdateManager::kState_ScheduledHoldoff)
            .value("kState_PrepareQuery", chip::DeviceLayer::SoftwareUpdateManager::kState_PrepareQuery)
            .value("kState_Query", chip::DeviceLayer::SoftwareUpdateManager::kState_Query)
            .value("kState_PrepareImageStorage", chip::DeviceLayer::SoftwareUpdateManager::kState_PrepareImageStorage)
            .value("kState_Download", chip::DeviceLayer::SoftwareUpdateManager::kState_Download)
            .value("kState_Install", chip::DeviceLayer::SoftwareUpdateManager::kState_Install)
            .value("kState_ApplicationManaged", chip::DeviceLayer::SoftwareUpdateManager::kState_ApplicationManaged)
            .value("kState_MaxState", chip::DeviceLayer::SoftwareUpdateManager::kState_MaxState)
            .export_values();

        pybind11::enum_<chip::DeviceLayer::SoftwareUpdateManager::EventType>(cl, "EventType", pybind11::arithmetic(),
                                                                             "API events generated by the  object.")
            .value("kEvent_PrepareQuery", chip::DeviceLayer::SoftwareUpdateManager::kEvent_PrepareQuery)
            .value("kEvent_PrepareQuery_Metadata", chip::DeviceLayer::SoftwareUpdateManager::kEvent_PrepareQuery_Metadata)
            .value("kEvent_QueryPrepareFailed", chip::DeviceLayer::SoftwareUpdateManager::kEvent_QueryPrepareFailed)
            .value("kEvent_QuerySent", chip::DeviceLayer::SoftwareUpdateManager::kEvent_QuerySent)
            .value("kEvent_SoftwareUpdateAvailable", chip::DeviceLayer::SoftwareUpdateManager::kEvent_SoftwareUpdateAvailable)
            .value("kEvent_FetchPartialImageInfo", chip::DeviceLayer::SoftwareUpdateManager::kEvent_FetchPartialImageInfo)
            .value("kEvent_PrepareImageStorage", chip::DeviceLayer::SoftwareUpdateManager::kEvent_PrepareImageStorage)
            .value("kEvent_StartImageDownload", chip::DeviceLayer::SoftwareUpdateManager::kEvent_StartImageDownload)
            .value("kEvent_StoreImageBlock", chip::DeviceLayer::SoftwareUpdateManager::kEvent_StoreImageBlock)
            .value("kEvent_ComputeImageIntegrity", chip::DeviceLayer::SoftwareUpdateManager::kEvent_ComputeImageIntegrity)
            .value("kEvent_ResetPartialImageInfo", chip::DeviceLayer::SoftwareUpdateManager::kEvent_ResetPartialImageInfo)
            .value("kEvent_ReadyToInstall", chip::DeviceLayer::SoftwareUpdateManager::kEvent_ReadyToInstall)
            .value("kEvent_StartInstallImage", chip::DeviceLayer::SoftwareUpdateManager::kEvent_StartInstallImage)
            .value("kEvent_Finished", chip::DeviceLayer::SoftwareUpdateManager::kEvent_Finished)
            .value("kEvent_DefaultCheck", chip::DeviceLayer::SoftwareUpdateManager::kEvent_DefaultCheck)
            .export_values();

        pybind11::enum_<chip::DeviceLayer::SoftwareUpdateManager::ActionType>(
            cl, "ActionType", pybind11::arithmetic(),
            "When a software update is available, the application can chose one of\n  the following actions as part of the "
            "SoftwareUpdateAvailable API event\n  callback. The default action will be set to kAction_Now.")
            .value("kAction_Ignore", chip::DeviceLayer::SoftwareUpdateManager::kAction_Ignore)
            .value("kAction_DownloadNow", chip::DeviceLayer::SoftwareUpdateManager::kAction_DownloadNow)
            .value("kAction_DownloadLater", chip::DeviceLayer::SoftwareUpdateManager::kAction_DownloadLater)
            .value("kAction_ApplicationManaged", chip::DeviceLayer::SoftwareUpdateManager::kAction_ApplicationManaged)
            .export_values();

        cl.def("Abort", (int (chip::DeviceLayer::SoftwareUpdateManager::*)()) & chip::DeviceLayer::SoftwareUpdateManager::Abort,
               "C++: chip::DeviceLayer::SoftwareUpdateManager::Abort() --> int");
        cl.def("CheckNow",
               (int (chip::DeviceLayer::SoftwareUpdateManager::*)()) & chip::DeviceLayer::SoftwareUpdateManager::CheckNow,
               "C++: chip::DeviceLayer::SoftwareUpdateManager::CheckNow() --> int");
        cl.def("ImageInstallComplete",
               (int (chip::DeviceLayer::SoftwareUpdateManager::*)(int)) &
                   chip::DeviceLayer::SoftwareUpdateManager::ImageInstallComplete,
               "C++: chip::DeviceLayer::SoftwareUpdateManager::ImageInstallComplete(int) --> int", pybind11::arg("aError"));
        cl.def("PrepareImageStorageComplete",
               (int (chip::DeviceLayer::SoftwareUpdateManager::*)(int)) &
                   chip::DeviceLayer::SoftwareUpdateManager::PrepareImageStorageComplete,
               "C++: chip::DeviceLayer::SoftwareUpdateManager::PrepareImageStorageComplete(int) --> int", pybind11::arg("aError"));
        cl.def("SetQueryIntervalWindow",
               (int (chip::DeviceLayer::SoftwareUpdateManager::*)(unsigned int, unsigned int)) &
                   chip::DeviceLayer::SoftwareUpdateManager::SetQueryIntervalWindow,
               "C++: chip::DeviceLayer::SoftwareUpdateManager::SetQueryIntervalWindow(unsigned int, unsigned int) --> int",
               pybind11::arg("aMinWaitTimeMs"), pybind11::arg("aMaxWaitTimeMs"));
        cl.def("IsInProgress",
               (bool (chip::DeviceLayer::SoftwareUpdateManager::*)()) & chip::DeviceLayer::SoftwareUpdateManager::IsInProgress,
               "C++: chip::DeviceLayer::SoftwareUpdateManager::IsInProgress() --> bool");
        cl.def(
            "GetState",
            (enum chip::DeviceLayer::SoftwareUpdateManager::State(chip::DeviceLayer::SoftwareUpdateManager::*)()) &
                chip::DeviceLayer::SoftwareUpdateManager::GetState,
            "C++: chip::DeviceLayer::SoftwareUpdateManager::GetState() --> enum chip::DeviceLayer::SoftwareUpdateManager::State");
        cl.def_static("DefaultEventHandler",
                      (void (*)(void *, enum chip::DeviceLayer::SoftwareUpdateManager::EventType,
                                const union chip::DeviceLayer::SoftwareUpdateManager::InEventParam &,
                                union chip::DeviceLayer::SoftwareUpdateManager::OutEventParam &)) &
                          chip::DeviceLayer::SoftwareUpdateManager::DefaultEventHandler,
                      "C++: chip::DeviceLayer::SoftwareUpdateManager::DefaultEventHandler(void *, enum "
                      "chip::DeviceLayer::SoftwareUpdateManager::EventType, const union "
                      "chip::DeviceLayer::SoftwareUpdateManager::InEventParam &, union "
                      "chip::DeviceLayer::SoftwareUpdateManager::OutEventParam &) --> void",
                      pybind11::arg("apAppState"), pybind11::arg("aEvent"), pybind11::arg("aInParam"), pybind11::arg("aOutParam"));

        { // chip::DeviceLayer::SoftwareUpdateManager::InEventParam file:platform/SoftwareUpdateManager.h line:362
            auto & enclosing_class = cl;
            pybind11::class_<chip::DeviceLayer::SoftwareUpdateManager::InEventParam,
                             std::shared_ptr<chip::DeviceLayer::SoftwareUpdateManager::InEventParam>>
                cl(enclosing_class, "InEventParam", "");
            cl.def(pybind11::init([]() { return new chip::DeviceLayer::SoftwareUpdateManager::InEventParam(); }));
            cl.def("Clear",
                   (void (chip::DeviceLayer::SoftwareUpdateManager::InEventParam::*)()) &
                       chip::DeviceLayer::SoftwareUpdateManager::InEventParam::Clear,
                   "C++: chip::DeviceLayer::SoftwareUpdateManager::InEventParam::Clear() --> void");
        }

        { // chip::DeviceLayer::SoftwareUpdateManager::OutEventParam file:platform/SoftwareUpdateManager.h line:414
            auto & enclosing_class = cl;
            pybind11::class_<chip::DeviceLayer::SoftwareUpdateManager::OutEventParam,
                             std::shared_ptr<chip::DeviceLayer::SoftwareUpdateManager::OutEventParam>>
                cl(enclosing_class, "OutEventParam", "");
            cl.def(pybind11::init([]() { return new chip::DeviceLayer::SoftwareUpdateManager::OutEventParam(); }));
            cl.def_readwrite("DefaultHandlerCalled",
                             &chip::DeviceLayer::SoftwareUpdateManager::OutEventParam::DefaultHandlerCalled);
            cl.def("Clear",
                   (void (chip::DeviceLayer::SoftwareUpdateManager::OutEventParam::*)()) &
                       chip::DeviceLayer::SoftwareUpdateManager::OutEventParam::Clear,
                   "C++: chip::DeviceLayer::SoftwareUpdateManager::OutEventParam::Clear() --> void");
        }

        { // chip::DeviceLayer::SoftwareUpdateManager::RetryParam file:platform/SoftwareUpdateManager.h line:281
            auto & enclosing_class = cl;
            pybind11::class_<chip::DeviceLayer::SoftwareUpdateManager::RetryParam,
                             std::shared_ptr<chip::DeviceLayer::SoftwareUpdateManager::RetryParam>>
                cl(enclosing_class, "RetryParam", "");
            cl.def(pybind11::init([]() { return new chip::DeviceLayer::SoftwareUpdateManager::RetryParam(); }));
            cl.def_readwrite("NumRetries", &chip::DeviceLayer::SoftwareUpdateManager::RetryParam::NumRetries);
        }
    }
    // chip::DeviceLayer::SoftwareUpdateMgr() file:platform/SoftwareUpdateManager.h line:334
    M("chip::DeviceLayer")
        .def("SoftwareUpdateMgr", (class chip::DeviceLayer::SoftwareUpdateManager & (*) ()) & chip::DeviceLayer::SoftwareUpdateMgr,
             "Returns a reference to the public interface of the SoftwareUpdateManager singleton object.\n\n chip application "
             "should use this to access features of the SoftwareUpdateManager object\n that are common to all platforms.\n\nC++: "
             "chip::DeviceLayer::SoftwareUpdateMgr() --> class chip::DeviceLayer::SoftwareUpdateManager &",
             pybind11::return_value_policy::automatic);

    // chip::DeviceLayer::SoftwareUpdateMgrImpl() file:platform/SoftwareUpdateManager.h line:342
    M("chip::DeviceLayer")
        .def(
            "SoftwareUpdateMgrImpl",
            (class chip::DeviceLayer::SoftwareUpdateManagerImpl & (*) ()) & chip::DeviceLayer::SoftwareUpdateMgrImpl,
            "Returns the platform-specific implementation of the SoftwareUpdateManager singleton object.\n\n chip applications can "
            "use this to gain access to features of the SoftwareUpdateManager\n that are specific to the selected "
            "platform.\n\nC++: chip::DeviceLayer::SoftwareUpdateMgrImpl() --> class chip::DeviceLayer::SoftwareUpdateManagerImpl &",
            pybind11::return_value_policy::automatic);
}
